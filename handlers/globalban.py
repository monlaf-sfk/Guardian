from time import time

from aiogram import types, Router
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError
from aiogram.filters import Command
from aiogram.types import BufferedInputFile

from sqlalchemy.orm import Session

from filters import filters
import localization
from configurator import config
from db import utils
from db.models.chat import Chat, get_all_chats
from db.models.global_bans_sql import enable_gbans, disable_gbans, does_chat_gban, is_user_gbanned, gban_user, \
    ungban_user, get_gban_list
from db.models.users import Users
from dispatcher import bot
from handlers.pyrogram import get_user_id

router=Router()

GBAN_ERRORS = {
    "User is an administrator of the chat",
    "Chat not found",
    "Not enough rights to restrict/unrestrict chat member",
    "User_not_participant",
    "Peer_id_invalid",
    "Group chat was deactivated",
    "Need to be inviter of a user to kick it from a basic group",
    "Chat_admin_required",
    "Only the creator of a basic group can kick group administrators",
    "Channel_private",
    "Not in the chat"
}

UNGBAN_ERRORS = {
    "User is an administrator of the chat",
    "Chat not found",
    "Not enough rights to restrict/unrestrict chat member",
    "User_not_participant",
    "Method is available for supergroup and channel chats only",
    "Not in the chat",
    "Channel_private",
    "Chat_admin_required",
}
@router.message(Command('gbanstat'),filters.IsCreaterFilter())
async def gbanstat(message: types.Message, session: Session):
    chat: Chat = session.query(Chat).get(message.chat.id)
    if chat.permission == False:
        return await message.reply('‚ö† –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é!!')

    arg = message.text.split()[1:]
    if len(arg) > 0:
        if arg[0].lower() in ["on", "yes"]:
            enable_gbans(message.chat.id,session)
            await message.reply("–Ø –≤–∫–ª—é—á–∏–ª gbans –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è"
                                                 '–æ—Ç —Å–ø–∞–º–µ—Ä–æ–≤, –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö —Ç—Ä–æ–ª–ª–µ–π.')
        elif arg[0].lower() in ["off", "no"]:

            disable_gbans(message.chat.id,session)
            await message.reply("–Ø –æ—Ç–∫–ª—é—á–∏–ª gbans –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. GBans –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π "
                                                 "–±–æ–ª—å—à–µ. –í—ã –±—É–¥–µ—Ç–µ –º–µ–Ω–µ–µ –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç –≤—Å—è–∫–∏—Ö —Ç—Ä–æ–ª–ª–µ–π –∏ —Å–ø–∞–º–µ—Ä–æ–≤"
                                                 "—Ö–æ—Ç—è!")
    else:
        await message.reply("–î–∞–π—Ç–µ –º–Ω–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞! –≤–∫–ª/–≤—ã–∫–ª, –¥–∞/–Ω–µ—Ç!\n\n"
                                             "–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {}\n"
                                             "–ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ True, –ª—é–±—ã–µ –≥–±–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç, —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ."
                                             "–ö–æ–≥–¥–∞ False, –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç, –æ—Å—Ç–∞–≤–ª—è—è –≤–∞—Å –Ω–∞ –º–∏–ª–æ—Å—Ç—å"
                                             "—Å–ø–∞–º–µ—Ä—ã".format(does_chat_gban(message.chat.id)))

@router.message(Command('gban'),filters.IsCreaterFilter())
async def cmd_ban(message: types.Message, session: Session):
    # Check if command is sent as reply to some message
    chat: Chat = session.query(Chat).get(message.chat.id)
    if chat.permission == False:
        return await message.reply('‚ö† –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é!!')
    arg = message.text.split()
    arg = arg[1:]
    try:
        log_msg = '<i>–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ë–∞–Ω</i>'
        log_msg += "\n<i>üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</i> " + utils.user_mention(message.from_user)
        reason = ''
        if (len(arg) >= 1 and message.reply_to_message) or (len(arg) >= 2 and not message.reply_to_message):
            log_msg += f'\nüí≠ –ü—Ä–∏—á–∏–Ω–∞: {" ".join(map(str, arg[1:])) if not message.reply_to_message else " ".join(map(str, arg[:]))}'
            reason = f'{" ".join(map(str, arg[1:])) if not message.reply_to_message else " ".join(map(str, arg[:]))}'
        restriction_time = 86400 * 367
        if message.reply_to_message:
            log_msg += "\n<i>üë§ –ò–≥—Ä–æ–∫:</i> " + utils.user_mention(message.reply_to_message.from_user)
            user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
            if user.status == "creator" or user.status == "administrator":
                await message.reply(localization.get_string("error_ban_admin"))
                return
            user = user.user
        elif len(arg) >= 1 and arg[0].isdigit():
            user: Users = session.query(Users).get(arg[0])
            # Admins cannot be restricted
            user1 = await bot.get_chat_member(message.chat.id, user.id)
            log_msg += f"\n<i>üë§ –ò–≥—Ä–æ–∫:</i> {user.link}"
            if user1.status == "creator" or user1.status == "administrator":
                await message.reply(localization.get_string("error_ban_admin"))
                return
        elif len(arg) >= 1:
            user_id = await get_user_id(arg)

            user = await bot.get_chat_member(message.chat.id, user_id)
            log_msg += f"\n<i>üë§ –ò–≥—Ä–æ–∫:</i> {arg[0]}"
            if user.status == "creator" or user.status == "administrator":
                await message.reply(localization.get_string("error_ban_admin"))
                return
            user = user.user
        else:
            return await message.reply('üìñ –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ : /gban [user] [reason] '
                                       '\n ‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–∞–Ω/–º—É—Ç –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!')
        if is_user_gbanned(user.id, session):
            await  message.reply(
                "‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
            return

        chats = get_all_chats(session)
        for chat in chats:
            chat_id = chat.chat_id
            # Check if this group has disabled gbans
            if not does_chat_gban(chat_id,session):
                continue
            try:
                await bot.ban_chat_member(chat_id=chat_id, user_id=user.id,
                                          until_date=int(time()) + restriction_time)
            except TelegramBadRequest as excp:
                if excp.message in GBAN_ERRORS:
                    print(excp.message)
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å gban –∏–∑-–∑–∞: {}".format(excp.message))
                    ungban_user(user.id,session)
                    return
            except TelegramAPIError:
                pass
        gban_user(session, user.id, user.first_name, reason)
        await utils.write_log(bot, log_msg, "–ì–õ–û–ë–ê–õ-–ë–ê–ù")
        await message.reply(log_msg,disable_web_page_preview=True)
    except TelegramBadRequest:
        return await message.reply('üìñ –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ : /gban [user] [reason] '
                                   '\n ‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–∞–Ω/–º—É—Ç –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!')

@router.message(Command('ungban'),filters.IsCreaterFilter())
async def cmd_ban(message: types.Message, session: Session):
    # Check if command is sent as reply to some message
    chat: Chat = session.query(Chat).get(message.chat.id)
    if chat.permission == False:
        return await message.reply('‚ö† –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—é!!')
    arg = message.text.split()
    arg = arg[1:]
    try:
        log_msg = '<i>–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª –ì–ª–æ–±–∞–ª—å–Ω—ã–π –†–∞–∑–ë–∞–Ω</i>'
        log_msg += "\n<i>üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:</i> " + utils.user_mention(message.from_user)
        if message.reply_to_message:
            log_msg += "\n<i>üë§ –ò–≥—Ä–æ–∫:</i> " + utils.user_mention(message.reply_to_message.from_user)
            user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)

            if user.status == "creator" or user.status == "administrator":
                await message.reply(localization.get_string("error_ban_admin"))
                return
            user = user.user
        elif len(arg) >= 1 and arg[0].isdigit():
            user: Users = session.query(Users).get(arg[0])
            # Admins cannot be restricted
            user1 = await bot.get_chat_member(message.chat.id, user.id)
            log_msg += f"\n<i>üë§ –ò–≥—Ä–æ–∫:</i> {user.link}"
            if user1.status == "creator" or user1.status == "administrator":
                await message.reply(localization.get_string("error_ban_admin"))
                return
        elif len(arg) >= 1:
            user_id = await get_user_id(arg)
            user = await bot.get_chat_member(message.chat.id, user_id)
            log_msg += f"\n<i>üë§ –ò–≥—Ä–æ–∫:</i> {arg[0]}"
            if user.status == "creator" or user.status == "administrator":
                await message.reply(localization.get_string("error_ban_admin"))
                return
            user = user.user
        else:
            return await message.reply('üìñ –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ : /ungban [user] [reson] '
                                       '\n ‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–∞–Ω/–º—É—Ç –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!')
        if not is_user_gbanned(user.id, session):
            await  message.reply(
                "‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω!")
            return

        chats = get_all_chats(session)
        for chat in chats:
            chat_id = chat.chat_id
            # Check if this group has disabled gbans

            if not does_chat_gban(chat_id,session):
                continue
            try:
                member = await bot.get_chat_member(chat_id, user.id)
                if member.status == 'kicked':
                    await bot.unban_chat_member(chat_id, user.id)
            except TelegramBadRequest as excp:
                if excp.message in UNGBAN_ERRORS:
                    pass
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏—á–∏–Ω–∞–º: {}".format(excp.message))
                    ungban_user(user.id,session)
                    return
            except TelegramAPIError:
                pass
        ungban_user(user.id, session)
        await utils.write_log(bot, log_msg, "–ì–õ–û–ë–ê–õ-–†–ê–ó–ë–ê–ù")
        await message.reply(log_msg,disable_web_page_preview=True)
    except TelegramBadRequest:
        return await message.reply('üìñ –§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ : /ungban [user] [reason] '
                                   '\n ‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –±–∞–Ω/–º—É—Ç –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞!')

@router.message(Command('gbanlist'),filters.IsCreaterFilter())
async def chats_list_handler(message: types.Message, session: Session):
    if message.from_user.id != int(config.bot.owner):
        return
    banned_users = get_gban_list(session)
    banfile = '–ù–∞—Ö—É–π —ç—Ç–∏—Ö –ø–∞—Ä–Ω–µ–π.\n'
    for user in banned_users:
        banfile += "[x] {} - {}\n".format(user["name"], user["user_id"])
        if user["reason"]:
            banfile += "–ü—Ä–∏—á–∏–Ω–∞: {}\n".format(user["reason"])

    text_file = BufferedInputFile(bytes(banfile, 'utf-8'), filename="gbanlist.txt")
    await message.reply_document(document=text_file, caption="–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

