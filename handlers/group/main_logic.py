import datetime
import asyncio
import random
import string
from collections import namedtuple
from contextlib import suppress
from typing import Tuple

from aiogram.exceptions import TelegramBadRequest

from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.base import StorageKey, BaseStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ChatJoinRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold


from configurator import config

from dispatcher import bot

Emoji = namedtuple('Emoji', ['unicode', 'subject', 'name'])


emojies = (
    Emoji(unicode=u'\U0001F48D', subject='ring', name='–∫–æ–ª—å—Ü–æ'),
    Emoji(unicode=u'\U0001F460', subject='shoe', name='—Ç—É—Ñ–ª—é'),
    Emoji(unicode=u'\U0001F451', subject='crown', name='–∫–æ—Ä–æ–Ω—É'),
    Emoji(unicode=u'\U00002702', subject='scissors', name='–Ω–æ–∂–Ω–∏—Ü—ã'),
    Emoji(unicode=u'\U0001F941', subject='drum', name='–±–∞—Ä–∞–±–∞–Ω'),

    Emoji(unicode=u'\U0001F48A', subject='pill', name='–ø–∏–ª—é–ª—é'),
    Emoji(unicode=u'\U0001F338', subject='blossom', name='—Ü–≤–µ—Ç–æ–∫'),
    Emoji(unicode=u'\U0001F9C0', subject='cheese', name='—Å—ã—Ä'),
    Emoji(unicode=u'\U0001F3A7', subject='headphone', name='–Ω–∞—É—à–Ω–∏–∫–∏'),
    Emoji(unicode=u'\U000023F0', subject='clock', name='–±—É–¥–∏–ª—å–Ω–∏–∫'),

    Emoji(unicode=u'\U0001F951', subject='avocado', name='–∞–≤–æ–∫–∞–¥–æ'),
    Emoji(unicode=u'\U0001F334', subject='palm', name='–ø–∞–ª—å–º—É'),
    Emoji(unicode=u'\U0001F45C', subject='handbag', name='—Å—É–º–∫—É'),
    Emoji(unicode=u'\U0001F9E6', subject='socks', name='–Ω–æ—Å–∫–∏'),
    Emoji(unicode=u'\U0001FA93', subject='axe', name='—Ç–æ–ø–æ—Ä'),

    Emoji(unicode=u'\U0001F308', subject='rainbow', name='—Ä–∞–¥—É–≥—É'),
    Emoji(unicode=u'\U0001F4A7', subject='droplet', name='–∫–∞–ø–ª—é'),
    Emoji(unicode=u'\U0001F525', subject='fire', name='–æ–≥–æ–Ω—å'),
    Emoji(unicode=u'\U000026C4', subject='snowman', name='—Å–Ω–µ–≥–æ–≤–∏–∫–∞'),
    Emoji(unicode=u'\U0001F9F2', subject='magnet', name='–º–∞–≥–Ω–∏—Ç'),

    Emoji(unicode=u'\U0001F389', subject='popper', name='—Ö–ª–æ–ø—É—à–∫—É'),
    Emoji(unicode=u'\U0001F339', subject='rose', name='—Ä–æ–∑—É'),
    Emoji(unicode=u'\U0000270E', subject='pencil', name='–∫–∞—Ä–∞–Ω–¥–∞—à'),
    Emoji(unicode=u'\U00002709', subject='envelope', name='–∫–æ–Ω–≤–µ—Ä—Ç'),
    Emoji(unicode=u'\U0001F680', subject='rocket', name='—Ä–∞–∫–µ—Ç—É'),
)
NUM_BUTTONS = 7
ENTRY_TIME = 150
BAN_TIME= 30
users_entrance = (
    '{mention}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!\n–ù–∞–∂–º–∏ –Ω–∞ {subject} —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º',
    '–ê, {mention}, —ç—Ç–æ —Å–Ω–æ–≤–∞ —Ç—ã? –ê, –∏–∑–≤–∏–Ω–∏—Ç–µ, –æ–±–æ–∑–Ω–∞–ª—Å—è. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ {subject} –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏',
    '–ë—Ä–∞—Ç–∏—à—å, {mention}, —è —Ç–µ–±—è —Ç–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞–ª. –ñ–º–∏ –Ω–∞ {subject} –∏ –ø—Ä–æ–±–µ–≥–∞–π',
    '–†–∞–∑–≤–µ —ç—Ç–æ –Ω–µ —Ç–æ—Ç {mention}? –¢—ã–∫–∞–π –Ω–∞ {subject} –∏ –ø—Ä–æ—Ö–æ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º—ã –∂–¥–∞–ª–∏',
    '–î–∞–∂–µ –Ω–µ –≤–µ—Ä–∏—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —Ç—ã, {mention}. –ú–Ω–µ —Å–∫–∞–∑–∞–ª–∏ –Ω–µ –ø—É—Å–∫–∞—Ç—å –±–æ—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –Ω–∞–∂–º–∏ –Ω–∞ {subject}',

    '{mention}, —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ —Ç—ã? –ú—ã —Ç–µ–±—è –∂–¥–∞–ª–∏. –ò–ª–∏ –Ω–µ —Ç—ã? –ù–∞—Å—Ç–æ—è—â–∏–π {mention} —Å–º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ {subject}. ' +
    '–î–æ–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç!',
    '–ö–æ–≥–æ —è –≤–∏–∂—É? –≠—Ç–æ –∂–µ {mention}! –¢—ã–∫–∞–π –Ω–∞ {subject} –∏ –º–æ–∂–µ—à—å –∏–¥—Ç–∏',
    '–ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ {mention}.\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, {mention}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ {subject}',
    '–û, {mention}, –º—ã —Ç–µ–±—è –∂–¥–∞–ª–∏. –î–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç –∏ –ø—Ä–æ—Ö–æ–¥–∏. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ {subject}',
    '–î–∞ {mention}, —Ç—ã –º–µ–Ω—è —É–∂–µ –±–µ—Å–∏—à—å! –ê, –ø—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –æ–±–æ–∑–Ω–∞–ª—Å—è. –ß—Ç–æ–±—ã —è –º–æ–≥ –≤–∞—Å –≤–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ {subject}'
)

new_user_added = types.ChatPermissions(
    can_send_messages=False,
    can_send_media_messages=False,
    can_send_polls=False,
    can_send_other_messages=False,
    can_add_web_page_previews=False,
    can_invite_users=False,
    can_change_info=False,
    can_pin_messages=False,
)

# –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–µ–≥–æ, —á—Ç–æ –æ–Ω –Ω–µ –±–æ—Ç
user_allowed = types.ChatPermissions(
    can_send_messages=True,
    can_send_media_messages=True,
    can_send_polls=True,
    can_send_other_messages=True,
    can_add_web_page_previews=True,
    can_invite_users=True,
    can_change_info=False,
    can_pin_messages=False,
)
class confirming_callback(CallbackData,prefix='new_chat'):
    subject: str
    necessary_subject: str
    user_id: int

class ConfirmUserState(StatesGroup):
    IncomerUser = State()

def users_entrance_generator(mention: str, subject: str) -> str:

    return random.choice(users_entrance).format(mention=mention, subject=hbold(subject))

def generate_confirm_markup(user_id: int)-> Tuple[InlineKeyboardMarkup, str]:
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
    """
    # —Å–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    confirm_user_markup = InlineKeyboardBuilder()
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ–º –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    subjects = random.sample(emojies, NUM_BUTTONS)
    # –∏–∑ –Ω–∏—Ö –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω —Ä–∞–Ω–¥–æ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    necessary_subject = random.choice(subjects)
    for emoji in subjects:
        button = InlineKeyboardButton(
            text=emoji.unicode,
            callback_data=confirming_callback(subject=emoji.subject, necessary_subject=necessary_subject.subject, user_id=user_id).pack()
        )
        confirm_user_markup.add(button)

    # –æ—Ç–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    return confirm_user_markup.adjust(3).as_markup(), necessary_subject.name
router=Router()
@router.message(Command('start'))
async def start(message: types.Message,fsm_storage: BaseStorage):
    if message.chat.id == message.from_user.id:
        if str(message.text[7:]) =='pegasuschat':

            generated_tuple = generate_confirm_markup(message.from_user.id)
            markup = generated_tuple[0]
            subject = generated_tuple[1]
            first_name = ''.join(filter(str.isalnum, message.from_user.full_name))
            mention= "<a href=\"" + message.from_user.url + f"\">{first_name}</a>"
            answer = users_entrance_generator(mention=mention, subject=subject)
            await message.reply(
                text=answer,
                reply_markup=markup
            )

            await fsm_storage.set_state(bot=bot, state=ConfirmUserState.IncomerUser, key=StorageKey(
                user_id=message.from_user.id,
                chat_id=message.from_user.id,
                bot_id=bot.id))


            data = {"user_id": message.from_user.id}
            await fsm_storage.update_data(bot=bot, data=data, key=StorageKey(
                user_id=message.from_user.id,
                chat_id=message.from_user.id,
                bot_id=bot.id))

            await asyncio.sleep(ENTRY_TIME)
            try:
                await message.delete()
            except TelegramBadRequest:
                pass
        else:
            keyboard = InlineKeyboardBuilder()
            keyboard.add(InlineKeyboardButton(text='üí¨ Pegasus ‚Äî –ß–∞—Ç', url='https://t.me/pegasus_talk'))
            keyboard.add(InlineKeyboardButton(text='üé† Pegasus Bot', url='https://t.me/pegasusgame_bot'))
            await message.reply('üëãüèª –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ <b>Pegasus</b>. \n\n'
                                'üëâüèª –ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —á—Ç–æ–±—ã –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. \n\n'
                                '<i>‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∞–º.\n'
                                '–ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É –∏ –≥–æ—Ç–æ–≤—ã –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. </i>\n\nüì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É @corching. \n',
                                reply_markup=keyboard.as_markup())

        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
@router.callback_query(confirming_callback.filter())
async def user_confirm(call: types.CallbackQuery, callback_data: confirming_callback,state:FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    """
    # —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∞ –∏–º–µ–Ω–Ω–æ
    # –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    subject = callback_data.subject
    # –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –Ω–∞–∂–∞—Ç—å
    necessary_subject = callback_data.necessary_subject
    # –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–æ–π, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º int)
    user_id = int(callback_data.user_id)
    # –∏ –∞–π–¥–∏ —á–∞—Ç–∞, –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω—É—é—â–µ–π –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤


    # –µ—Å–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –Ω–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—à–µ–¥—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ–±—ã –Ω–µ –ª–µ–∑ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏).
    if call.from_user.id != user_id:

        return await call.answer("–≠—Ç–∞ –∫–Ω–æ–ø–æ—á–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è", show_alert=True)
    # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –≤—ã–¥–∞—Ç—å —é–∑–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –µ—Å–ª–∏ –æ–Ω –Ω–∞–∂–∞–ª –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
    user = await bot.get_chat_member(config.groups.main, user_id=call.from_user.id)
    if user.status == 'member' or user.status == 'administrator' or user.status == 'creator':
        await call.message.answer('‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —á–∞—Ç–µ!')
    elif subject == necessary_subject:
        name="".join(random.choice(string.ascii_letters + '0123456789') for _ in range(random.randint(16, 30)))
        url=await bot.create_chat_invite_link(config.groups.main,expire_date=datetime.timedelta(minutes=5),member_limit=1,name=name,creates_join_request=False)
        report_kb = InlineKeyboardBuilder()
        report_kb.add(InlineKeyboardButton(text='üîó –í–æ–π—Ç–∏', url=f'{url.invite_link}'))
        await call.message.answer('üîó –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç!',reply_markup=report_kb.as_markup())
    else:
        await call.message.answer('‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–µ–Ω–∞ –∫–∞–ø—á–∞!')

    await state.clear()
    await call.message.delete()

@router.chat_join_request(F.chat.id == config.groups.main)
async def chat_join_request_handler(request: ChatJoinRequest):
    try:
        await request.decline()
        await bot.send_message(request.from_user.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –Ω–∞ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!\nüîó  –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–ø—á—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å @chat_pegasus')
    except:
        return
